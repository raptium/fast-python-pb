#!/usr/bin/env python
"""Auto-generated unit tests."""

import unittest
import copy
import cPickle

{% macro value(field, index) -%}
  {%- if field.label == LABEL.REPEATED -%}
    (
  {%- endif -%}
  {%- if field.type == TYPE.STRING -%}
    u'{{ index }}'
  {%- elif field.type == TYPE.BYTES -%}
    b'\x00\x01\x02'
  {%- elif field.type == TYPE.BOOL -%}
    True
  {%- elif field.type == TYPE.FLOAT -%}
    {{ index }}.0
  {%- elif field.type == TYPE.INT32
        or field.type == TYPE.SINT32
        or field.type == TYPE.UINT32
        or field.type == TYPE.FIXED32
        or field.type == TYPE.INT64
        or field.type == TYPE.SINT64
        or field.type == TYPE.UINT64 -%}
    {{ index }}
  {%- elif field.type == TYPE.DOUBLE -%}
    {{ index }}.{{ index }}
  {%- elif field.type == TYPE.ENUM -%}
    0
  {%- endif -%}
  {%- if field.label == LABEL.REPEATED -%}
    ,)
  {%- endif -%}
{%- endmacro %}

{% for pkg in packages %}
{% for file in pkg.children %}
import {{ file.package }}
{% endfor %}
{% endfor %}

{% for pkg in packages %}
{% for file in pkg.children %}
class Test_{{ file.package.replace('.', '_') }}(unittest.TestCase):
  {% for message in file.message_type %}
  def test{{ message.name }}_Basics(self):
    pb = {{ file.package }}.{{ message.name }}()
    {% for field in message.field %}
    {% if field.type != TYPE.MESSAGE %}
    pb.{{ field.name }} = {{ value(field, loop.index) }}
    self.assertEquals({{ value(field, loop.index) }}, pb.{{ field.name }})
    {% endif %}
    {% endfor %}

    pb2 = {{ file.package }}.{{ message.name }}()
    pb2.ParseFromString(pb.SerializeToString())

    {% for field in message.field %}
    self.assertEquals(pb.{{ field.name }}, pb2.{{ field.name }})
    {% endfor %}

    pb3 = copy.deepcopy(pb)
    pb4 = cPickle.loads(cPickle.dumps(pb3))

    {% for field in message.field %}
    self.assertEquals(pb.{{ field.name }}, pb3.{{ field.name }})
    self.assertEquals(pb.{{ field.name }}, pb4.{{ field.name }})
    {% endfor %}

  {% endfor %}
{% endfor %}

{% endfor %}


def suite():
  suite = unittest.TestSuite()
  {% for pkg in packages %}
  {% for file in pkg.children %}
  suite.addTests(unittest.makeSuite(Test_{{ file.package.replace('.', '_') }}))
  {% endfor %}
  {% endfor %}
  return suite
